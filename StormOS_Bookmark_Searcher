#!/usr/bin/env python3
import sys
import subprocess
import re
import sqlite3
import shutil
import os
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, QPushButton, QListWidget, QMenu, QAction, QListWidgetItem
from PyQt5.QtGui import QClipboard
from bs4 import BeautifulSoup

def is_chrome_installed() -> bool:
    try:
        subprocess.check_output(["google-chrome-stable", "--version"])
        return True
    except subprocess.CalledProcessError:
        return False

def is_chromium_installed() -> bool:
    try:
        subprocess.check_output(["chromium", "--version"])
        return True
    except subprocess.CalledProcessError:
        return False
    except FileNotFoundError:
        return False

def is_firefox_installed() -> bool:
    try:
        subprocess.check_output(["firefox", "--version"])
        return True
    except subprocess.CalledProcessError:
        return False
    except FileNotFoundError:
        return False

def copy_firefox_database() -> str:
    home_dir = subprocess.check_output(["bash", "-c", "echo $HOME"]).decode().strip()
    # Get the actual path to places.sqlite
    profile_path = os.path.join(home_dir, ".mozilla/firefox/*.default-release/places.sqlite")
    places_db = subprocess.check_output(["bash", "-c", "ls " + profile_path]).decode().strip()
    db_copy_path = os.path.join(home_dir, "places_copy.sqlite")

    # Copy the database file to a temporary location
    shutil.copyfile(places_db, db_copy_path)
    return db_copy_path

def get_firefox_bookmarks() -> list:
    bookmarks = []
    if is_firefox_installed():
        db_copy_path = copy_firefox_database()
        conn = None
        try:
            conn = sqlite3.connect(db_copy_path)
            cursor = conn.cursor()
            cursor.execute("SELECT moz_bookmarks.title, moz_places.url FROM moz_bookmarks INNER JOIN moz_places ON moz_bookmarks.fk = moz_places.id")
            rows = cursor.fetchall()

            for title, url in rows:
                bookmarks.append((title, url))

        except sqlite3.OperationalError as e:
            print(f"Error accessing Firefox bookmarks: {e}")
        finally:
            if conn:
                conn.close()
            # Remove the copied database file after use
            os.remove(db_copy_path)
    return bookmarks

def get_bookmarks() -> list:
    bookmarks = []

    if is_chrome_installed():
        chrome_bookmarks_file = (
            subprocess.check_output(["bash", "-c", "echo $HOME"]).decode().strip()
            + "/.config/google-chrome/Default/Bookmarks"
        )
        chrome_bookmarks_data = subprocess.check_output(
            [
                "jq",
                r'.. | objects | select(.type?=="url") | "\(.name)@@\(.url)"',
                chrome_bookmarks_file,
            ]
        ).decode().strip()
        chrome_bookmarks = [bookmark.split("@@") for bookmark in chrome_bookmarks_data.split("\n")]
        bookmarks.extend(chrome_bookmarks)

    if is_chromium_installed():
        chromium_bookmarks_file = (
            subprocess.check_output(["bash", "-c", "echo $HOME"]).decode().strip()
            + "/.config/chromium/Default/Bookmarks"
        )
        chromium_bookmarks_data = subprocess.check_output(
            [
                "jq",
                r'.. | objects | select(.type?=="url") | "\(.name)@@\(.url)"',
                chromium_bookmarks_file,
            ]
        ).decode().strip()
        chromium_bookmarks = [bookmark.split("@@") for bookmark in chromium_bookmarks_data.split("\n")]
        bookmarks.extend(chromium_bookmarks)

    # Add Firefox bookmarks
    bookmarks.extend(get_firefox_bookmarks())

    return bookmarks

def get_bookmarks_from_html(file_path: str) -> list:
    bookmarks = []
    with open(file_path, 'r', encoding='utf-8') as file:
        soup = BeautifulSoup(file, 'html.parser')
        for dt in soup.find_all('DT'):
            if dt.a:
                name = dt.a.string
                url = dt.a['HREF']
                bookmarks.append((name, url))
    return bookmarks

class CustomListWidget(QListWidget):
    def __init__(self):
        super().__init__()

    def contextMenuEvent(self, event):
        item = self.itemAt(event.pos())
        if item is not None:
            menu = QMenu(self)
            copy_action = QAction("Copy URL", self)
            copy_action.triggered.connect(lambda: self.copy_url(item))
            menu.addAction(copy_action)
            menu.exec_(event.globalPos())

    def copy_url(self, item):
        clipboard = QApplication.clipboard()
        clipboard.setText(item.url)

class BookmarkSearch(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("StormOS Bookmark Searcher")
        self.setGeometry(100, 100, 800, 600)

        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)

        layout = QVBoxLayout(central_widget)

        search_layout = QHBoxLayout()
        self.entry = QLineEdit()
        self.entry.textChanged.connect(self.on_search)
        search_button = QPushButton("Search")
        search_button.clicked.connect(self.on_search)
        search_layout.addWidget(self.entry)
        search_layout.addWidget(search_button)

        layout.addLayout(search_layout)

        self.bookmark_list = CustomListWidget()
        layout.addWidget(self.bookmark_list)

        self.bookmark_list.itemDoubleClicked.connect(self.launch_browser_tab)

    def on_search(self):
        search_term = self.entry.text().lower()
        self.update_bookmark_list(search_term)

    def update_bookmark_list(self, search_term):
        self.bookmark_list.clear()
        bookmarks = get_bookmarks()
        for bookmark in bookmarks:
            name, url = bookmark[0], bookmark[1].strip(' "')  # Strip extra quotes and whitespace
            if re.search(re.escape(search_term), name, re.IGNORECASE) or re.search(re.escape(search_term), url, re.IGNORECASE):
                item = QListWidgetItem(f"{name} - {url}")
                item.url = url
                self.bookmark_list.addItem(item)

    def launch_browser_tab(self, item):
        url = item.url
        if is_chrome_installed():
            subprocess.Popen(["google-chrome-stable", "--new-tab", url])
        elif is_chromium_installed():
            subprocess.Popen(["chromium", "--new-tab", url])
        elif is_firefox_installed():
            subprocess.Popen(["firefox", "--new-tab", url])

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = BookmarkSearch()
    window.show()
    sys.exit(app.exec_())
