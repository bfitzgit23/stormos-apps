#!/usr/bin/env python3

import os
import sys
import json
import requests
import shutil
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QLabel, QLineEdit, QPushButton, QTextBrowser,
    QVBoxLayout, QWidget, QMessageBox, QComboBox, QHBoxLayout, QProgressBar,
    QAction, QFileDialog
)
from PyQt5.QtCore import QSize, Qt, QThread, pyqtSignal
from git import Repo, GitCommandError


class CloneThread(QThread):
    """
    Thread to handle cloning repositories without freezing the UI.
    """
    progress = pyqtSignal(str)
    finished = pyqtSignal(bool, str)

    def __init__(self, repo_url, local_path, username, email, parent=None):
        super().__init__(parent)
        self.repo_url = repo_url
        self.local_path = local_path
        self.username = username
        self.email = email

    def run(self):
        try:
            self.progress.emit("Cloning repository...")
            repo = Repo.clone_from(self.repo_url, self.local_path)
            self.progress.emit("Setting local Git configurations...")
            repo.config_writer().set_value("user", "name", self.username).release()
            repo.config_writer().set_value("user", "email", self.email).release()
            self.progress.emit("Repository cloned and configured successfully.")
            self.finished.emit(True, "Cloning and configuration completed.")
        except GitCommandError as e:
            self.finished.emit(False, f"Error cloning repository: {e}")
        except Exception as e:
            self.finished.emit(False, f"Unexpected error: {e}")


class PushThread(QThread):
    """
    Thread to handle pushing changes to the remote repository without freezing the UI.
    """
    progress = pyqtSignal(str)
    finished = pyqtSignal(bool, str)

    def __init__(self, repo_path, parent=None):
        super().__init__(parent)
        self.repo_path = repo_path

    def run(self):
        try:
            self.progress.emit("Pushing changes to remote...")
            repo = Repo(self.repo_path)
            origin = repo.remote(name='origin')
            origin.push()
            self.progress.emit("Changes pushed to remote successfully.")
            self.finished.emit(True, "Push completed.")
        except GitCommandError as e:
            self.finished.emit(False, f"Error pushing changes: {e}")
        except Exception as e:
            self.finished.emit(False, f"Unexpected error: {e}")


class GitHubGitClient(QMainWindow):
    """
    A simplified PyQt5-based GitHub Git Client that allows users to perform essential Git operations
    and interact with GitHub repositories through a graphical interface.
    """

    def __init__(self):
        super().__init__()
        self.initUI()

        # Initialize repository path
        self.repo_path = None

        # Set default cloning directory
        self.default_clone_dir = os.path.expanduser("~/Documents/GitHub")
        os.makedirs(self.default_clone_dir, exist_ok=True)

        # Initialize progress bar
        self.progress_bar = QProgressBar(self)
        self.statusBar().addPermanentWidget(self.progress_bar)
        self.progress_bar.setVisible(False)

        # Load GitHub token and Git credentials from configuration files
        self.load_git_credentials()

    def initUI(self):
        """Set up the user interface."""
        self.setWindowTitle('GitHub Git Client')
        self.setGeometry(100, 100, 800, 600)

        # Create Menu Bar
        menu_bar = self.menuBar()

        # Help Menu
        help_menu = menu_bar.addMenu('Help')

        # About Action
        about_action = QAction('About', self)
        about_action.triggered.connect(self.show_about_dialog)
        help_menu.addAction(about_action)

        # Create central widget and layout
        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        # GitHub Username and PAT Input
        input_layout = QHBoxLayout()
        self.username_label = QLabel('GitHub Username:')
        self.username_input = QLineEdit(self)
        input_layout.addWidget(self.username_label)
        input_layout.addWidget(self.username_input)

        self.token_label = QLabel('Personal Access Token:')
        self.token_input = QLineEdit(self)
        self.token_input.setEchoMode(QLineEdit.Password)
        input_layout.addWidget(self.token_label)
        input_layout.addWidget(self.token_input)

        layout.addLayout(input_layout)

        # Configure Credentials Button
        configure_credentials_button = QPushButton('Configure Credentials', self)
        configure_credentials_button.clicked.connect(self.configure_git_credentials)
        layout.addWidget(configure_credentials_button)

        # Fetch Repositories Button
        fetch_repos_button = QPushButton('Fetch Repositories', self)
        fetch_repos_button.clicked.connect(self.fetch_repositories)
        layout.addWidget(fetch_repos_button)

        # Repository Selection ComboBox
        self.repo_combo_box = QComboBox(self)
        layout.addWidget(QLabel("GitHub Repositories:"))
        layout.addWidget(self.repo_combo_box)

        # Existing Cloned Repositories ComboBox
        self.existing_clones_combo_box = QComboBox(self)
        layout.addWidget(QLabel("Existing Cloned Repositories:"))
        layout.addWidget(self.existing_clones_combo_box)

        # Clone Repository Button
        clone_repo_button = QPushButton('Clone Repository', self)
        clone_repo_button.clicked.connect(self.initiate_clone_repository)
        layout.addWidget(clone_repo_button)

        # Use Existing Repository Button
        use_existing_repo_button = QPushButton('Use Selected Existing Repository', self)
        use_existing_repo_button.clicked.connect(self.use_existing_repository)
        layout.addWidget(use_existing_repo_button)

        # Set Cloning Directory Button
        set_clone_dir_button = QPushButton('Set Default Cloning Directory', self)
        set_clone_dir_button.clicked.connect(self.set_cloning_directory)
        layout.addWidget(set_clone_dir_button)

        # Commit Message Input and Commit Button
        commit_layout = QHBoxLayout()
        self.commit_input = QLineEdit(self)
        self.commit_input.setPlaceholderText("Enter commit message")
        commit_button = QPushButton('Commit Changes', self)
        commit_button.clicked.connect(self.commit_changes)
        commit_layout.addWidget(self.commit_input)
        commit_layout.addWidget(commit_button)
        layout.addLayout(commit_layout)

        # Push Changes Button
        push_button = QPushButton('Push Changes', self)
        push_button.clicked.connect(self.push_changes)
        layout.addWidget(push_button)

        # Text Browser for Displaying Messages
        self.repo_details_browser = QTextBrowser(self)
        layout.addWidget(self.repo_details_browser)

    def show_about_dialog(self):
        """
        Display the About dialog with information about the application.
        """
        credentials_path = os.path.expanduser("~/Documents/GitHubGitClient/github_credentials.json")
        about_text = f"""
        <h2>GitHub Git Client</h2>
        <p><strong>Version:</strong> 1.0</p>
        <p><strong>Author:</strong> Your Name</p>
        <p>This application allows you to interact with your GitHub repositories through a graphical interface.</p>
        <p><strong>Credentials File:</strong> Stored at <code>{credentials_path}</code></p>
        <p><strong>Cloned Repositories Location:</strong> Stored at <code>{self.default_clone_dir}</code></p>
        <p><strong>Usage Instructions:</strong></p>
        <ol>
            <li>Enter your GitHub username and Personal Access Token (PAT) in the provided fields.</li>
            <li>Click "Configure Credentials" to save your credentials and set up Git.</li>
            <li>Click "Fetch Repositories" to retrieve your GitHub repositories.</li>
            <li>Select a repository from "GitHub Repositories" to clone it, or choose an existing clone from "Existing Cloned Repositories".</li>
            <li>Use the "Commit Changes" and "Push Changes" buttons to manage your repository.</li>
            <li>Click "Set Default Cloning Directory" to change where repositories are cloned by default.</li>
        </ol>
        <p>For more information, refer to the documentation.</p>
        """
        QMessageBox.about(self, "About GitHub Git Client", about_text)

    def display_message(self, message):
        """
        Display a message in the repository details browser.

        Args:
            message (str): The message to display.
        """
        self.repo_details_browser.append(message)
        # Scroll to the bottom of the QTextBrowser
        scrollbar = self.repo_details_browser.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())

    def save_git_credentials(self, username, token):
        """
        Save Git credentials to a JSON file in the user's home directory.

        Args:
            username (str): GitHub username.
            token (str): GitHub Personal Access Token (PAT).
        """
        credentials = {'username': username, 'token': token}
        credentials_dir = os.path.expanduser("~/Documents/GitHubGitClient")
        os.makedirs(credentials_dir, exist_ok=True)
        credentials_file = os.path.join(credentials_dir, "github_credentials.json")
        try:
            with open(credentials_file, 'w') as file:
                json.dump(credentials, file)
            self.display_message("GitHub credentials saved successfully.")
        except Exception as e:
            self.display_message(f"Error saving Git credentials: {e}")

    def load_git_credentials(self):
        """
        Load Git credentials from the JSON file if it exists.
        """
        credentials_file = os.path.expanduser("~/Documents/GitHubGitClient/github_credentials.json")
        if os.path.exists(credentials_file):
            try:
                with open(credentials_file, 'r') as file:
                    credentials = json.load(file)
                    self.username_input.setText(credentials['username'])
                    self.token_input.setText(credentials['token'])
                    self.github_token = credentials['token']
                self.display_message("GitHub credentials loaded successfully.")
                # After loading credentials, fetch existing clones
                self.load_existing_clones()
            except Exception as e:
                self.display_message(f"Error loading Git credentials: {e}")
        else:
            self.display_message("GitHub credentials file not found. Please configure your credentials.")

    def configure_git_credentials(self):
        """
        Configure Git with the provided username and email, and save the credentials.
        """
        try:
            # Get the GitHub username and token from the input fields
            username = self.username_input.text().strip()
            token = self.token_input.text().strip()

            if not username or not token:
                QMessageBox.warning(self, "Warning", "Please enter your GitHub username and Personal Access Token (PAT).")
                return

            # Configure Git credentials globally using subprocess
            import subprocess
            subprocess.run(['git', 'config', '--global', 'user.name', username], check=True)
            subprocess.run(['git', 'config', '--global', 'user.email', f'{username}@users.noreply.github.com'], check=True)
            subprocess.run(['git', 'config', '--global', 'credential.helper', 'store'], check=True)

            # Verify that configurations are set correctly
            name = subprocess.check_output(['git', 'config', '--global', 'user.name']).decode().strip()
            email = subprocess.check_output(['git', 'config', '--global', 'user.email']).decode().strip()

            if name != username or email != f"{username}@users.noreply.github.com":
                raise Exception("Git global configurations did not set correctly.")

            # Save Git credentials to the JSON file
            self.save_git_credentials(username, token)

            # Load existing clones after configuring credentials
            self.load_existing_clones()

        except subprocess.CalledProcessError as e:
            self.display_message(f"Error configuring Git credentials: {e}")
            QMessageBox.critical(self, "Configuration Error", f"Failed to configure Git: {e}")
        except Exception as e:
            self.display_message(f"Unexpected error configuring Git credentials: {e}")
            QMessageBox.critical(self, "Configuration Error", f"An unexpected error occurred:\n{e}")

    def fetch_repositories(self):
        """
        Fetch the list of GitHub repositories for the user and populate the combo box.
        """
        username = self.username_input.text().strip()
        self.github_token = self.token_input.text().strip()

        if not username or not self.github_token:
            QMessageBox.warning(self, "Warning", "Please enter your GitHub username and Personal Access Token (PAT).")
            return

        try:
            # Create a session and authenticate with GitHub using the token
            session = requests.Session()
            session.headers["Authorization"] = f"token {self.github_token}"

            # Fetch the list of user repositories
            response = session.get(f"https://api.github.com/users/{username}/repos")

            if response.status_code == 200:
                repositories = response.json()
                if repositories:
                    repo_names = [repo["name"] for repo in repositories]
                    self.repo_combo_box.clear()
                    self.repo_combo_box.addItems(repo_names)
                    self.repo_combo_box.setEnabled(True)
                    self.display_message("Repositories fetched successfully. Select a repository to clone.")
                else:
                    self.display_message("No repositories found.")
            else:
                error_message = response.json().get("message", "Unknown error")
                self.display_message(f"Failed to fetch repositories. Status code: {response.status_code}. Message: {error_message}")
        except Exception as e:
            self.display_message(f"Error fetching repositories: {e}")

    def load_existing_clones(self):
        """
        Scan the default cloning directory for existing cloned repositories and populate the combo box.
        """
        try:
            existing_repos = []
            for item in os.listdir(self.default_clone_dir):
                item_path = os.path.join(self.default_clone_dir, item)
                if os.path.isdir(item_path) and os.path.isdir(os.path.join(item_path, '.git')):
                    existing_repos.append(item)
            self.existing_clones_combo_box.clear()
            self.existing_clones_combo_box.addItems(existing_repos)
            if existing_repos:
                self.display_message("Existing cloned repositories detected.")
            else:
                self.display_message("No existing cloned repositories found.")
        except Exception as e:
            self.display_message(f"Error loading existing clones: {e}")

    def initiate_clone_repository(self):
        """
        Initiate the cloning process by selecting a repository and cloning it asynchronously.
        """
        repo_name = self.repo_combo_box.currentText()
        if not repo_name:
            self.display_message("Please select a repository to clone.")
            return

        # Construct the repository URL with authentication
        username = self.username_input.text().strip()
        token = self.token_input.text().strip()

        if not username or not token:
            QMessageBox.warning(self, "Warning", "Please enter your GitHub username and Personal Access Token (PAT).")
            return

        repo_url = f"https://{username}:{token}@github.com/{username}/{repo_name}.git"

        # Ask the user where to clone the repository
        reply = QMessageBox.question(
            self, 'Clone Directory',
            "Do you want to clone the repository to the default directory?\n"
            f"Default Directory: {self.default_clone_dir}",
            QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes
        )

        if reply == QMessageBox.No:
            # Let the user choose a different directory
            selected_dir = QFileDialog.getExistingDirectory(
                self, "Select Cloning Directory", self.default_clone_dir
            )
            if selected_dir:
                local_path = os.path.join(selected_dir, repo_name)
            else:
                self.display_message("Cloning operation canceled.")
                return
        else:
            # Use the default cloning directory
            local_path = os.path.join(self.default_clone_dir, repo_name)

        # Check if the directory already exists
        if os.path.exists(local_path):
            reply = QMessageBox.question(
                self, 'Repository Already Cloned',
                f"The repository '{repo_name}' is already cloned at:\n{local_path}\n\nDo you want to use the existing clone?",
                QMessageBox.Yes | QMessageBox.No, QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                self.repo_path = local_path
                self.display_message(f"Using existing repository at: {self.repo_path}")
                return
            else:
                # Ask for a different directory
                selected_dir = QFileDialog.getExistingDirectory(
                    self, "Select Alternative Directory for Cloning",
                    self.default_clone_dir
                )
                if selected_dir:
                    local_path = os.path.join(selected_dir, repo_name)
                    if os.path.exists(local_path):
                        QMessageBox.warning(self, "Warning", f"The directory '{local_path}' already exists.")
                        return
                else:
                    self.display_message("Cloning operation canceled.")
                    return

        # Start the cloning thread with username and email
        self.clone_thread = CloneThread(repo_url, local_path, username, f"{username}@users.noreply.github.com")
        self.clone_thread.progress.connect(self.update_progress)
        self.clone_thread.finished.connect(self.handle_clone_finished)
        self.clone_thread.start()

        # Show the progress bar
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # Indeterminate state

    def handle_clone_finished(self, success, message):
        """
        Handle the completion of the cloning process.

        Args:
            success (bool): Indicates if cloning was successful.
            message (str): Success or error message.
        """
        self.progress_bar.setVisible(False)
        self.display_message(message)
        if success:
            self.repo_path = os.path.join(
                self.clone_thread.local_path
            )
            self.display_message(f"Repository path set to: {self.repo_path}")
            # Refresh existing clones list
            self.load_existing_clones()

    def use_existing_repository(self):
        """
        Use a selected existing cloned repository.
        """
        repo_name = self.existing_clones_combo_box.currentText()
        if not repo_name:
            QMessageBox.warning(self, "Warning", "No existing cloned repositories to use.")
            return

        local_path = os.path.join(self.default_clone_dir, repo_name)
        if os.path.exists(local_path):
            self.repo_path = local_path
            self.display_message(f"Using existing repository at: {self.repo_path}")
        else:
            self.display_message(f"Selected repository path does not exist: {local_path}")

    def set_cloning_directory(self):
        """
        Allow the user to set a new default cloning directory.
        """
        new_dir = QFileDialog.getExistingDirectory(
            self, "Select Default Cloning Directory", self.default_clone_dir
        )
        if new_dir:
            self.default_clone_dir = new_dir
            self.display_message(f"Default cloning directory set to: {self.default_clone_dir}")
            # Save the new default cloning directory to the configuration file
            self.save_cloning_directory(new_dir)
            # Refresh existing clones list
            self.load_existing_clones()
        else:
            self.display_message("Cloning directory selection canceled.")

    def save_cloning_directory(self, directory_path):
        """
        Save the default cloning directory to the configuration file.

        Args:
            directory_path (str): The path to save.
        """
        config = {}
        config_file = os.path.expanduser("~/Documents/GitHubGitClient/config.json")
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r') as file:
                    config = json.load(file)
            except:
                config = {}
        config['default_clone_dir'] = directory_path
        try:
            with open(config_file, 'w') as file:
                json.dump(config, file)
            self.display_message("Default cloning directory saved successfully.")
        except Exception as e:
            self.display_message(f"Error saving cloning directory: {e}")

    def load_cloning_directory(self):
        """
        Load the default cloning directory from the configuration file.
        """
        config_file = os.path.expanduser("~/Documents/GitHubGitClient/config.json")
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r') as file:
                    config = json.load(file)
                    self.default_clone_dir = config.get('default_clone_dir', self.default_clone_dir)
            except:
                self.display_message("Error loading cloning directory configuration.")

    def commit_changes(self):
        """
        Automatically stage all changes (tracked and untracked) and commit them with a user-provided message using GitPython.
        """
        commit_message = self.commit_input.text().strip()

        if not commit_message:
            QMessageBox.warning(self, "Warning", "Please enter a commit message.")
            return

        if not self.repo_path:
            self.display_message("Please clone or select a repository first.")
            return

        try:
            repo = Repo(self.repo_path)
            if repo.is_dirty(index=True, working_tree=True, untracked_files=True):
                # Stage all changes including untracked files
                repo.git.add('--all')
                self.display_message("All changes staged for commit.")

                # Commit the changes
                repo.git.commit('-m', commit_message)
                self.display_message(f"Changes committed with message: {commit_message}")
                self.commit_input.clear()
            else:
                self.display_message("No changes to commit.")
        except GitCommandError as e:
            self.display_message(f"Error committing changes: {e}")
            QMessageBox.critical(self, "Commit Error", f"Failed to commit changes:\n{e}")
        except Exception as e:
            self.display_message(f"Unexpected error committing changes: {e}")
            QMessageBox.critical(self, "Commit Error", f"An unexpected error occurred:\n{e}")

    def push_changes(self):
        """
        Push committed changes to the remote repository using GitPython.
        """
        if not self.repo_path:
            self.display_message("Please clone or select a repository first.")
            return

        # Start the push thread
        self.push_thread = PushThread(self.repo_path)
        self.push_thread.progress.connect(self.update_progress)
        self.push_thread.finished.connect(self.handle_push_finished)
        self.push_thread.start()

        # Show the progress bar
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # Indeterminate state

    def handle_push_finished(self, success, message):
        """
        Handle the completion of the push process.

        Args:
            success (bool): Indicates if pushing was successful.
            message (str): Success or error message.
        """
        self.progress_bar.setVisible(False)
        self.display_message(message)
        if success:
            self.display_message("Push operation completed successfully.")

    def update_progress(self, message):
        """
        Update the progress bar with a message.

        Args:
            message (str): Progress message.
        """
        self.display_message(message)


def main():
    """Initialize and run the GitHub Git Client application."""
    app = QApplication(sys.argv)
    window = GitHubGitClient()
    window.show()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
