#!/usr/bin/env python


import requests  # Import the requests library
import os
import subprocess
import json
import sys
from PyQt5.QtPrintSupport import QPrinter, QPrintDialog
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtCore import Qt, QUrl, QSettings
from PyQt5.QtWidgets import (
    QApplication,
    QMainWindow,
    QSizePolicy,
    QAction,
    QFileDialog,
    QToolBar,
    QLineEdit,
    QPushButton,
    QTabWidget,
    QWidget,
    QVBoxLayout,
    QInputDialog,
    QMenuBar,
)

from PyQt5.QtWebEngineWidgets import QWebEngineView, QWebEnginePage

from bs4 import BeautifulSoup  # Import BeautifulSoup for HTML parsing
from PyQt5.QtGui import QKeyEvent


class CustomTab(QWidget):
    def __init__(self, title, favicon_url):
        super().__init__()
        layout = QVBoxLayout()
        self.label_title = QLabel(title)
        self.label_favicon = QLabel()
        self.label_favicon.setPixmap(QIcon.fromTheme(favicon_url).pixmap(16, 16))  # Set the favicon (adjust size as needed)
        layout.addWidget(self.label_favicon)
        layout.addWidget(self.label_title)
        self.setLayout(layout)



class StormyPage(QWebEnginePage):
    def __init__(self, browser):
        super().__init__()
        self.browser = browser
        self.link_url = None  # Store the link URL for later use

    def createStandardContextMenu(self, menu):
        super().createStandardContextMenu(menu)

        # Create a custom context menu action for downloading the link
        self.download_link_action = QAction("Download Link with SDM", self)
        self.download_link_action.triggered.connect(self.download_link_with_sdm)
        menu.addAction(self.download_link_action)

    def download_link_with_sdm(self):
        if self.link_url:
            # Use subprocess to open your download manager (replace 'sdm' with the actual command)
            try:
                subprocess.Popen(['sdmt', self.link_url])
            except FileNotFoundError:
                print("Download manager 'sdm' not found. Please provide the correct command.")

    def javaScriptAlert(self, url, msg):
        print(f"JavaScript Alert: {msg}")

    def acceptNavigationRequest(self, url, _type, isMainFrame):
        if not isMainFrame:
            # Store the link URL when a link is clicked
            self.link_url = url.toString()


    def javaScriptAlert(self, url, msg):
        print(f"JavaScript Alert: {msg}")

    def acceptNavigationRequest(self, url, _type, isMainFrame):
        if not isMainFrame:
            # Store the link URL when a link is clicked
            self.link_url = url.toString()
        return super().acceptNavigationRequest(url, _type, isMainFrame)

class StormyBrowser(QMainWindow):
    def __init__(self):
        super().__init__()
        self.browser_tabs = QTabWidget()
        self.browser_tabs.setTabsClosable(True)
        self.browser_tabs.tabCloseRequested.connect(self.close_tab)
        self.setCentralWidget(self.browser_tabs)
        self.tab_urls = {}  # Dictionary to store URLs for each tab
        self.init_ui()
        self.load_bookmarks()  # Load bookmarks when initializing
        self.browser_tabs.currentChanged.connect(self.tab_changed)  # Connect tab change signal
        # Add a new tab and set Google as the default page
        self.add_new_tab("https://www.duckduckgo.com")


        # Set the browser icon to the default system browser icon
        browser_icon = QIcon.fromTheme('web-browser')  # Use the "web-browser" theme icon
        self.setWindowIcon(browser_icon)


    def init_ui(self):
        self.setWindowTitle("Stormy Browser")
        self.setGeometry(100, 100, 1024, 768)

        self.create_menu_bar()

        # Create navigation buttons and address bar
        self.back_button = QPushButton()
        self.back_button.setIcon(QIcon.fromTheme("go-previous"))
        self.forward_button = QPushButton()
        self.forward_button.setIcon(QIcon.fromTheme("go-next"))
        self.reload_button = QPushButton()
        self.reload_button.setIcon(QIcon.fromTheme("view-refresh"))
        self.stop_button = QPushButton()
        self.stop_button.setIcon(QIcon.fromTheme("process-stop"))
        self.home_button = QPushButton()
        self.home_button.setIcon(QIcon.fromTheme("go-home"))
        self.new_tab_button = QPushButton()
        self.new_tab_button.setIcon(QIcon.fromTheme("document-new"))
        self.print_button = QPushButton()
        self.print_button.setIcon(QIcon.fromTheme("printer"))
        self.remove_bookmark_button = QPushButton()
        self.remove_bookmark_button.setIcon(QIcon.fromTheme("bookmark-remove"))

        # Create a download button
        self.download_button = QPushButton()
        self.download_button.setIcon(QIcon.fromTheme("download"))

        # Create a bookmark manager button
        self.bookmark_manager_button = QPushButton()
        self.bookmark_manager_button.setIcon(QIcon.fromTheme("bookmark-manager"))
        self.bookmark_manager_button.clicked.connect(self.open_bookmark_manager)

        # Create a Translate button with the "system-search" icon
        self.translate_button = QPushButton()
        self.translate_button.setIcon(QIcon.fromTheme("system-search"))
        self.translate_button.clicked.connect(self.open_translation)

        # Create a Calendar button with the "view-calendar" icon
        self.calendar_button = QPushButton()
        self.calendar_button.setIcon(QIcon.fromTheme("view-calendar"))
        self.calendar_button.clicked.connect(self.open_calendar)

        self.address_bar = QLineEdit()
        self.address_bar.returnPressed.connect(self.load_url)

        # Add an event filter to the address bar to capture key events
        self.address_bar.installEventFilter(self)

        # Create a toolbar to hold the navigation buttons, address bar, and additional buttons
        self.back_button.clicked.connect(self.navigate_back)
        self.forward_button.clicked.connect(self.navigate_forward)
        self.reload_button.clicked.connect(self.navigate_reload)
        self.stop_button.clicked.connect(self.navigate_stop)
        self.home_button.clicked.connect(self.open_home_page)
        self.new_tab_button.clicked.connect(self.add_new_tab)
        self.print_button.clicked.connect(self.print_page)
        self.download_button.clicked.connect(self.open_download_manager)
        self.remove_bookmark_button.clicked.connect(self.remove_bookmark)

        self.nav_toolbar = self.addToolBar("Navigation")
        self.nav_toolbar.addWidget(self.back_button)
        self.nav_toolbar.addWidget(self.forward_button)
        self.nav_toolbar.addWidget(self.reload_button)
        self.nav_toolbar.addWidget(self.stop_button)
        self.nav_toolbar.addWidget(self.home_button)
        self.nav_toolbar.addWidget(self.new_tab_button)
        self.nav_toolbar.addWidget(self.print_button)
        self.nav_toolbar.addWidget(self.bookmark_manager_button)  # Add the bookmark manager button
        self.nav_toolbar.addWidget(self.address_bar)
        self.nav_toolbar.addWidget(self.download_button)
        self.nav_toolbar.addWidget(self.remove_bookmark_button)
        self.nav_toolbar.addWidget(self.translate_button)  # Add the Translate button
        self.nav_toolbar.addWidget(self.calendar_button)  # Add the Calendar button

    def create_menu_bar(self):
        menu_bar = self.menuBar()

        # Create File menu
        file_menu = menu_bar.addMenu("File")
        self.add_bookmark_action = QAction("Add Bookmark", self)
        self.add_bookmark_action.triggered.connect(self.add_bookmark)
        file_menu.addAction(self.add_bookmark_action)

        # Create Bookmarks menu
        self.bookmarks_menu = menu_bar.addMenu("Bookmarks")
        self.import_bookmarks_action = QAction("Import Bookmarks", self)
        self.import_bookmarks_action.triggered.connect(self.import_bookmarks)
        file_menu.addAction(self.import_bookmarks_action)  # Add the import bookmarks action

    def add_new_tab(self, url=""):
        browser_tab = QWidget()
        browser = QWebEngineView()
        browser.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        browser.setObjectName("browser")
        browser.urlChanged.connect(self.update_address_bar)
        
        # Capture webpage title changes and favicon changes
        browser.titleChanged.connect(lambda title, tab=browser_tab: self.update_tab_title(tab, title))
        browser.iconUrlChanged.connect(lambda icon_url, tab=browser_tab: self.update_tab_favicon(tab, icon_url.toString()))
        
        layout = QVBoxLayout()
        layout.addWidget(browser)
        browser_tab.setLayout(layout)

        self.browser_tabs.addTab(browser_tab, "New Tab")
        self.browser_tabs.setCurrentWidget(browser_tab)

        if url:
            browser.setUrl(QUrl(url))
            self.tab_urls[browser_tab] = url


    # Methods to update the tab title and favicon
    def update_tab_title(self, tab_widget, title):
        index = self.browser_tabs.indexOf(tab_widget)
        if index >= 0:
            self.browser_tabs.setTabText(index, title)

    def update_tab_favicon(self, tab_widget, favicon_url):
        index = self.browser_tabs.indexOf(tab_widget)
        if index >= 0 and favicon_url:
            # Download the favicon using requests
            response = requests.get(favicon_url)
            if response.status_code == 200:
                pixmap = QPixmap()
                pixmap.loadFromData(response.content)
                self.browser_tabs.setTabIcon(index, QIcon(pixmap))



    def tab_changed(self, index):
        # Update the address bar when the active tab changes
        if index >= 0 and index < self.browser_tabs.count():
            current_tab = self.browser_tabs.widget(index)
           
            current_url = self.tab_urls.get(current_tab, "")
            self.address_bar.setText(current_url)

    def update_address_bar(self):
        current_browser = self.current_browser()
        if current_browser:
            url = current_browser.url().toString()
            self.address_bar.setText(url)
            current_tab = self.browser_tabs.currentWidget()
            self.tab_urls[current_tab] = url

    def close_tab(self, index):
        tab_widget = self.browser_tabs.widget(index)
        tab_name = self.browser_tabs.tabText(index)

        if tab_name in self.tab_urls:
            del self.tab_urls[tab_name]  # Remove the URL entry for the closed tab

        if self.browser_tabs.count() > 1:
            self.browser_tabs.removeTab(index)
        else:
            current_browser = tab_widget.findChild(QWebEngineView)
            current_browser.setUrl(QUrl("about:blank"))

        # Clear the address bar when closing a tab
        self.address_bar.clear()

    def current_browser(self):
        current_tab = self.browser_tabs.currentWidget()
        if current_tab:
            return current_tab.findChild(QWebEngineView)
        return None

    def navigate_back(self):
        current_browser = self.current_browser()
        if current_browser:
            current_browser.back()

    def navigate_forward(self):
        current_browser = self.current_browser()
        if current_browser:
            current_browser.forward()

    def navigate_reload(self):
        current_browser = self.current_browser()
        if current_browser:
            current_browser.reload()

    def navigate_stop(self):
        current_browser = self.current_browser()
        if current_browser:
            current_browser.stop()

    def open_home_page(self):
        # Call the navigate_home method with the desired URL
        self.navigate_home("https://www.duckduckgo.com")

    def navigate_home(self, default_url="https://www.yahoo.com"):
        # Open a new tab with the homepage URL
        self.add_new_tab(default_url)

    def load_url(self):
        url = self.address_bar.text()
        if not url.startswith("http://") and not url.startswith("https://"):
            # Check if it's a search query, and if so, search it on DuckDuckGo
            if ' ' in url:
                search_query = url.replace(' ', '+')
                url = f"https://duckduckgo.com/?q={search_query}"
            else:
                url = "https://" + url

        current_browser = self.current_browser()
        if current_browser:
            current_browser.setUrl(QUrl(url))
            current_tab = self.browser_tabs.currentWidget()
            self.tab_urls[current_tab] = url

    def add_bookmark(self, title, url):
        # Assuming 'self.bookmarks_menu' is the menu you want to add bookmarks to
        bookmark_action = QAction(title, self)
        bookmark_action.setData(url)
        bookmark_action.triggered.connect(lambda _, url=url: self.load_bookmarked_url(url))
        self.bookmarks_menu.addAction(bookmark_action)
        self.save_bookmarks()


    def remove_bookmark(self):
        current_browser = self.current_browser()
        if current_browser:
            current_url = current_browser.url().toString()
            for action in self.bookmarks_menu.actions():
                if action.data() == current_url:
                    self.bookmarks_menu.removeAction(action)
                    self.save_bookmarks()
                    break

    def load_bookmarked_url(self, url):
        current_browser = self.current_browser()
        if current_browser:
            current_browser.setUrl(QUrl(url))

    def closeEvent(self, event):
        self.save_bookmarks()
        event.accept()

    def save_bookmarks(self):
        bookmarks = []
        for action in self.bookmarks_menu.actions():
            bookmarks.append({"name": action.text(), "url": action.data()})

        with open("bookmarks.json", "w") as f:
            json.dump(bookmarks, f)

    def load_bookmarks(self):
        try:
            with open("bookmarks.json", "r") as f:
                bookmarks = json.load(f)

            for bookmark in bookmarks:
                bookmark_action = QAction(bookmark["name"], self)
                bookmark_action.setData(bookmark["url"])
                bookmark_action.triggered.connect(lambda _, url=bookmark["url"]: self.load_bookmarked_url(url))
                self.bookmarks_menu.addAction(bookmark_action)

        except FileNotFoundError:
            pass

    def print_page(self):
        current_browser = self.current_browser()
        if current_browser:
            printer = QPrinter()
            dialog = QPrintDialog(printer, self)

            if dialog.exec_() == QPrintDialog.Accepted:
                current_browser.page().print(printer, self.handle_print_result)

    def handle_print_result(self, success):
        if success:
            print("Printing completed successfully.")
        else:
            print("Printing failed.")

    def open_download_manager(self):
        current_browser = self.current_browser()
        if current_browser:
            url = current_browser.url().toString()
            # Use subprocess to open your download manager (replace 'sdm' with the actual command)
            try:
                subprocess.Popen(['sdmt', url])
            except FileNotFoundError:
                print("Download manager 'sdm' not found. Please provide the correct command.")


    def open_bookmark_manager(self):
        # Open the "bmqts" launcher when the bookmark manager button is clicked
        try:
            subprocess.Popen(['bmqt'])
        except FileNotFoundError:
            print("Launcher 'bmqt' not found. Please provide the correct command.")

    def open_translation(self):
        # Use subprocess to open the translation program (replace 'multitranslatetest' with the actual command)
        try:
            subprocess.Popen(['multitranslatetest'])
        except FileNotFoundError:
            print("Translation program 'multitranslatetest' not found. Please provide the correct command.")

    def open_calendar(self):
        # Use subprocess to open the calendar program (replace 'pcal' with the actual command)
        try:
            subprocess.Popen(['pcal'])
        except FileNotFoundError:
            print("Calendar program 'pcal' not found. Please provide the correct command.")



    def import_bookmarks(self):
        # Paths for Google Chrome (google-chrome-stable) and Chromium
        chrome_bookmarks_path = os.path.expanduser("~/.config/google-chrome/Default/Bookmarks")
        chromium_bookmarks_path = os.path.expanduser("~/.config/chromium/Default/Bookmarks")

        # Determine which browser's bookmarks to import based on the existence of the file
        if os.path.exists(chrome_bookmarks_path):
            bookmarks_file_path = chrome_bookmarks_path
            browser_name = "Google Chrome"
        elif os.path.exists(chromium_bookmarks_path):
            bookmarks_file_path = chromium_bookmarks_path
            browser_name = "Chromium"
        else:
            print("Bookmarks file not found for Google Chrome or Chromium.")
            return

        try:
            with open(bookmarks_file_path, "r", encoding="utf-8") as bookmarks_file:
                bookmarks_data = json.load(bookmarks_file)

            # Extract the existing bookmarks (if any) from the bookmarks.json file
            try:
                with open("bookmarks.json", "r") as existing_bookmarks_file:
                    existing_bookmarks = json.load(existing_bookmarks_file)
            except FileNotFoundError:
                existing_bookmarks = []

            # Process the bookmarks_data and add them to the existing bookmarks
            new_bookmarks = []
            for bookmark in bookmarks_data["roots"]["bookmark_bar"]["children"]:
                title = bookmark.get("name", "")
                url = bookmark.get("url", "")
                if title and url:
                    new_bookmarks.append({"name": title, "url": url})

            # Combine the existing bookmarks and the newly imported bookmarks
            all_bookmarks = existing_bookmarks + new_bookmarks

            # Save the combined bookmarks to the bookmarks.json file
            with open("bookmarks.json", "w") as updated_bookmarks_file:
                json.dump(all_bookmarks, updated_bookmarks_file, indent=4)

            # Clear the existing bookmarks menu
            for action in self.bookmarks_menu.actions():
                self.bookmarks_menu.removeAction(action)

            # Add the imported bookmarks to the menu
            for bookmark in all_bookmarks:
                self.add_bookmark(bookmark["name"], bookmark["url"])

            print(f"Imported bookmarks from {browser_name} and updated the bookmarks menu.")

        except FileNotFoundError:
            print(f"Bookmarks file not found for {browser_name}.")
        except Exception as e:
            print(f"Error importing bookmarks from {browser_name}: {e}")

    def eventFilter(self, obj, event):
        if obj == self.address_bar and event.type() == QKeyEvent.KeyPress:
            if event.key() == Qt.Key_Return and event.modifiers() == Qt.ControlModifier:
                # Ctrl+Enter is pressed, modify the URL
                self.modify_url()
                return True  # Event handled

        return super().eventFilter(obj, event)


    def modify_url(self):
        current_url = self.address_bar.text()
        if not current_url.startswith("http://") and not current_url.startswith("https://"):
            if ' ' in current_url:
                search_query = current_url.replace(' ', '+')
                current_url = f"https://duckduckgo.com/?q={search_query}"
            else:
                # Check if the entered text is not a valid URL (does not contain a dot)
                if '.' not in current_url:
                    current_url = f"www.{current_url}.com"
                else:
                    current_url = "https://" + current_url

        self.address_bar.setText(current_url)





def main():
    app = QApplication(sys.argv)
    browser = StormyBrowser()
    browser.showMaximized()
    if "--new-tab" in sys.argv:
        new_tab_index = sys.argv.index("--new-tab")
        if len(sys.argv) > new_tab_index + 1:
            url = sys.argv[new_tab_index + 1]
            browser.add_new_tab(url)

    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
