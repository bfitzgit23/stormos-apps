#!/usr/bin/env python3

import os
import json
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QCalendarWidget, QListWidget, QListWidgetItem, QPushButton, QMessageBox
from PyQt5.QtGui import QKeySequence
from PyQt5.QtCore import pyqtSignal, Qt, QObject, QDate

class CalendarManager(QObject):
    date_selected = pyqtSignal(QDate)

    def __init__(self, calendar_widget):
        super().__init__()
        self.calendar_widget = calendar_widget
        self.calendar_widget.selectionChanged.connect(self.handle_date_selection)

    def handle_date_selection(self):
        selected_date = self.calendar_widget.selectedDate()
        self.date_selected.emit(selected_date)

class EntryListManager(QObject):
    date_selected = pyqtSignal(QDate)
    entry_saved = pyqtSignal()

    def __init__(self, list_widget):
        super().__init__()
        self.list_widget = list_widget
        self.journals = []
        self.selected_date = None

    def update_entries(self, selected_date):
        self.selected_date = selected_date
        self.list_widget.clear()  # Clear the list widget before adding new entries

        selected_date_str = selected_date.toString("yyyy-MM-dd")

        for journal in self.journals:
            date = journal["date"]
            entry = journal["entry"]

            if date == selected_date_str:
                list_item = QListWidgetItem(date)
                list_item.setData(Qt.UserRole, entry)
                self.list_widget.addItem(list_item)

        self.entry_saved.emit()

    def display_entries(self):
        self.list_widget.clear()

        for journal in self.journals:
            date = journal["date"]
            list_item = QListWidgetItem(date)
            list_item.setData(Qt.UserRole, journal["entry"])
            self.list_widget.addItem(list_item)

    def add_journal_entry(self, date, entry):
        for journal in self.journals:
            if journal["date"] == date:
                journal["entry"] = entry
                self.entry_saved.emit()
                break
        else:
            self.journals.append({"date": date, "entry": entry})
            self.entry_saved.emit()

    def remove_journal_entry(self, date):
        self.journals = [journal for journal in self.journals if journal["date"] != date]
        self.entry_saved.emit()

class EntryInputManager(QObject):
    entry_saved = pyqtSignal()

    def __init__(self, text_edit, entry_list_manager):
        super().__init__()
        self.text_edit = text_edit
        self.entry_list_manager = entry_list_manager
        self.text_edit.textChanged.connect(self.save_entry)
        self.future_date_typing = False

    def save_entry(self):
        entry_text = self.text_edit.toPlainText()

        if self.entry_list_manager.selected_date and not self.future_date_typing:
            selected_date_str = self.entry_list_manager.selected_date.toString("yyyy-MM-dd")
            self.entry_list_manager.add_journal_entry(selected_date_str, entry_text)
            self.entry_saved.emit()

    def set_future_date_typing(self, is_typing):
        self.future_date_typing = is_typing

class JournalApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("StormOS Journal App v3")
        self.setGeometry(100, 100, 800, 600)

        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        layout = QVBoxLayout(central_widget)
        top_layout = QHBoxLayout()

        left_layout = QVBoxLayout()
        self.calendar_widget = QCalendarWidget()
        left_layout.addWidget(self.calendar_widget)

        right_layout = QVBoxLayout()
        self.entry_list_widget = QListWidget()
        right_layout.addWidget(self.entry_list_widget)

        top_layout.addLayout(left_layout)
        top_layout.addLayout(right_layout)

        layout.addLayout(top_layout)
        self.entry_input_widget = QTextEdit()
        layout.addWidget(self.entry_input_widget)

        self.journals = []

        self.entry_list_manager = EntryListManager(self.entry_list_widget)
        self.entry_input_manager = EntryInputManager(self.entry_input_widget, self.entry_list_manager)

        self.load_journals()

        self.calendar_manager = CalendarManager(self.calendar_widget)
        self.entry_input_manager.entry_saved.connect(self.entry_list_manager.display_entries)
        self.entry_list_manager.entry_saved.connect(self.save_journals)

        self.entry_list_widget.itemSelectionChanged.connect(self.show_selected_entry)

        self.save_button = QPushButton("Save (Ctrl+S)")
        self.save_button.setShortcut(QKeySequence.Save)
        self.save_button.clicked.connect(self.save_journal_entry)

        layout.addWidget(self.save_button)

        self.delete_button = QPushButton("Delete Entry")
        self.delete_button.clicked.connect(self.delete_selected_entry)
        layout.addWidget(self.delete_button)

        self.entry_list_manager.entry_saved.connect(self.entry_list_manager.display_entries)

    def delete_selected_entry(self):
        selected_item = self.entry_list_widget.currentItem()

        if selected_item is not None:
            reply = QMessageBox.question(
                self,
                "Delete Entry",
                "Are you sure you want to delete this entry?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )

            if reply == QMessageBox.Yes:
                selected_date_str = self.calendar_widget.selectedDate().toString("yyyy-MM-dd")
                self.entry_list_manager.remove_journal_entry(selected_date_str)
                self.entry_input_widget.clear()

    def show_selected_entry(self):
        selected_item = self.entry_list_widget.currentItem()

        if selected_item is not None:
            entry_text = selected_item.data(Qt.UserRole)
            self.entry_input_widget.setPlainText(entry_text)

            # Update the calendar's selected date to match the date of the displayed entry
            selected_date_str = selected_item.text()
            selected_date = QDate.fromString(selected_date_str, "yyyy-MM-dd")
            self.calendar_widget.setSelectedDate(selected_date)


    def save_journal_entry(self):
        selected_date = self.calendar_widget.selectedDate()
        entry_text = self.entry_input_widget.toPlainText()

        selected_date_str = selected_date.toString("yyyy-MM-dd")
        self.entry_list_manager.add_journal_entry(selected_date_str, entry_text)

    def save_journals(self):
        home_dir = os.path.expanduser("~")
        json_file_path = os.path.join(home_dir, "Documents", "journals.json")

        with open(json_file_path, "w") as json_file:
            json.dump(self.entry_list_manager.journals, json_file, indent=4)

    def load_journals(self):
        home_dir = os.path.expanduser("~")
        json_file_path = os.path.join(home_dir, "Documents", "journals.json")

        if os.path.isfile(json_file_path):
            with open(json_file_path, "r") as json_file:
                self.entry_list_manager.journals = json.load(json_file)
        else:
            self.entry_list_manager.journals = []

        self.entry_list_manager.display_entries()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = JournalApp()
    window.show()
    sys.exit(app.exec_())
