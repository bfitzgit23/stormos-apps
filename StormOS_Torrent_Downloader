#!/usr/bin/env python3

import sys
import subprocess
import re
import os
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QHBoxLayout, QWidget, QFileDialog, QTextEdit, QProgressBar, QSpacerItem, QVBoxLayout
from PyQt5.QtCore import Qt, pyqtSlot, QThread, pyqtSignal

# Create a custom thread class for downloading
class DownloadThread(QThread):
    finished = pyqtSignal()
    output_ready = pyqtSignal(str)

    def __init__(self, command):
        super().__init__()
        self.command = command

    def run(self):
        process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        for line in process.stdout:
            self.output_ready.emit(line)
        process.stdout.close()
        process.stderr.close()
        process.wait()
        self.finished.emit()
        self.quit()  # Exit the thread's event loop
        self.wait()  # Wait for the thread to finish


class TorrentClient(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("StormOS Torrent Manager")
        self.setGeometry(100, 100, 600, 400)

        self.worker = None
        self.download_dir = os.path.expanduser("~/Downloads")

        self.initUI()

    def initUI(self):
        main_layout = QVBoxLayout()  # Main vertical layout

        button_layout = QHBoxLayout()  # Create a horizontal layout for buttons
        spacer_left = QSpacerItem(100, 1)  # Add spacer to left-align buttons
        spacer_right = QSpacerItem(100, 1)  # Add spacer to right-align buttons

        self.start_button = QPushButton("Start Torrent", self)
        self.start_button.clicked.connect(self.startTorrent)
        button_layout.addItem(spacer_left)  # Add spacer to left-align buttons
        button_layout.addWidget(self.start_button)

        self.stop_button = QPushButton("Stop Torrent", self)
        self.stop_button.clicked.connect(self.stopTorrent)
        button_layout.addWidget(self.stop_button)

        self.add_torrent_button = QPushButton("Add Torrent", self)
        self.add_torrent_button.clicked.connect(self.addTorrent)
        button_layout.addWidget(self.add_torrent_button)
        button_layout.addItem(spacer_right)  # Add spacer to right-align buttons

        # Add any additional torrent buttons here
        # For example:
        # self.another_button = QPushButton("Another Button", self)
        # self.another_button.clicked.connect(self.anotherFunction)
        # button_layout.addWidget(self.another_button)

        main_layout.addLayout(button_layout)  # Add the button layout to the main layout

        self.torrent_text_edit = QTextEdit(self)
        self.torrent_text_edit.setReadOnly(True)

        self.torrent_progress_bar = QProgressBar(self)

        main_layout.addWidget(self.torrent_text_edit)  # Add text edit to main layout
        main_layout.addWidget(self.torrent_progress_bar)  # Add progress bar to main layout

        central_widget = QWidget()
        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)  # Set central widget for the main window

    @pyqtSlot()
    def startTorrent(self):
        torrent_file = 'torrent_file.torrent'
        max_connections = 5  # Adjust this number to your preference
        split_count = 5     # Adjust this number to your preference

        command = [
            'aria2c',
            '--dir', self.download_dir,
            '--check-integrity=true',
            '--max-concurrent-downloads=' + str(max_connections),
            '--split=' + str(split_count),
            '--console-log-level=debug',  # Increase log level for more frequent updates
            torrent_file
        ]

        downloadThread = DownloadThread(command)  # Corrected variable name to match DownloadThread class
        downloadThread.finished.connect(self.handleDownloadFinished)
        downloadThread.output_ready.connect(self.handleOutputReady)
        downloadThread.start()

    @pyqtSlot()
    def stopTorrent(self):
        gid = '1'
        self.runSubprocess(['aria2c', '--remove', gid])

    @pyqtSlot()
    def addTorrent(self):
        options = QFileDialog.Options()
        torrent_file, _ = QFileDialog.getOpenFileName(self, "Select Torrent File", "", "Torrent Files (*.torrent);;All Files (*)", options=options)
        if torrent_file:
            self.runSubprocess(['aria2c', '--dir', self.download_dir, '--check-integrity=true', torrent_file])

    @pyqtSlot()
    def refreshList(self):
        self.torrent_text_edit.clear()
        self.runSubprocess(['aria2c', '--list-downloads'])

    def runSubprocess(self, command):
        if self.worker and self.worker.isRunning():
            self.worker.terminate()
            self.worker.wait()
        self.worker = DownloadThread(command)
        self.worker.finished.connect(self.handleDownloadFinished)
        self.worker.output_ready.connect(self.handleOutputReady)
        self.worker.start()

    @pyqtSlot()
    def handleDownloadFinished(self):
        # Handle download finished, update GUI if needed
        self.refreshList()

    @pyqtSlot(str)
    def handleOutputReady(self, line):
        self.torrent_text_edit.append(line.strip())  # Append to the top text widget for torrents
        progress_match = re.search(r'\d{1,3}%', line)
        if progress_match:
            progress_percentage = int(progress_match.group().replace('%', ''))
            # Ensure the progress percentage does not exceed 100
            if progress_percentage > 100:
                progress_percentage = 100
            self.torrent_progress_bar.setValue(progress_percentage)  # Update the top progress bar for torrents

def main():
    app = QApplication(sys.argv)
    window = TorrentClient()
    window.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
