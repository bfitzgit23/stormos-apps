#!/usr/bin/env python3

import sys
import numpy as np
from PyQt5.QtWidgets import (QApplication, QMainWindow, QPushButton, QFileDialog, 
                             QListWidget, QListWidgetItem, QWidget, QVBoxLayout, 
                             QHBoxLayout, QLabel, QSlider, QFrame, QAbstractItemView)
from PyQt5.QtCore import Qt, QUrl, QTimer, pyqtSignal, QPoint
from PyQt5.QtGui import QIcon, QPainter, QColor, QPolygon
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent



class CustomSlider(QSlider):
    valueChangedByUser = pyqtSignal(int)

    def __init__(self, orientation):
        super().__init__(orientation)
        self.dragging = False

    def mousePressEvent(self, event):
        if event.buttons() & Qt.LeftButton:
            click_position = event.pos().x()
            self.setValue(self.minimum() + (self.maximum() - self.minimum()) * click_position / self.width())
            self.dragging = True
            self.valueChangedByUser.emit(self.value())

    def mouseMoveEvent(self, event):
        if self.dragging and event.buttons() & Qt.LeftButton:
            click_position = event.pos().x()
            self.setValue(self.minimum() + (self.maximum() - self.minimum()) * click_position / self.width())
            self.valueChangedByUser.emit(self.value())

    def mouseReleaseEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.dragging = False

    def wheelEvent(self, event):
        delta = event.angleDelta().y() / 120
        new_value = self.value() - delta
        new_value = max(self.minimum(), min(self.maximum(), new_value))
        self.setValue(new_value)
        self.valueChangedByUser.emit(new_value)
        event.accept()


class EqualizerWidget(QFrame):
    def __init__(self):
        super().__init__()
        self.setMinimumSize(200, 100)
        self.bands = 10  # You can adjust the number of bands as needed
        self.levels = np.zeros(self.bands)

    def set_levels(self, levels):
        self.levels = levels
        self.update()  # Trigger a repaint

    def paintEvent(self, event):
        painter = QPainter(self)

        # Set background color to black
        painter.fillRect(self.rect(), QColor(0, 0, 0))  # Fill the background with black

        width = self.width() // self.bands  # Use integer division
        height = self.height()

        # Draw the thin horizontal bar in the middle
        painter.setPen(QColor(255, 255, 255))  # Set the color for the middle bar
        painter.drawLine(0, height // 2, self.width(), height // 2)  # Draw horizontal line

        for i in range(self.bands):
            # Calculate the height or radius based on levels
            size = int((self.levels[i] / 100) * (height / 2))  # Scale the size
            
            # Positioning shapes
            x_center = (i * width) + (width // 2)  # Center of the shape on the x-axis
            base_y = height // 2  # Base y position

            # Use a color gradient effect for yellow, red, blue, and bright white
            color = self.get_color(self.levels[i])
            painter.setBrush(color)  # Set brush color for filling
            
            # Draw different shapes based on the index
            if i % 4 == 0:  # Circle
                painter.drawEllipse(x_center - size, base_y - size, size * 2, size * 2)

            elif i % 4 == 1:  # Bar (move up and down)
                shape_y = base_y - size if self.levels[i] > 50 else base_y + size  # Up if level > 50, down otherwise
                painter.drawRect(x_center - (width // 4), shape_y, width // 2, size)

            elif i % 4 == 2:  # Triangle (move up and down)
                shape_y = base_y - size if self.levels[i] > 50 else base_y + size  # Up if level > 50, down otherwise
                points = [
                    QPoint(x_center, shape_y),  # Top vertex
                    QPoint(x_center - (width // 4), base_y + size),  # Bottom left
                    QPoint(x_center + (width // 4), base_y + size)   # Bottom right
                ]
                painter.drawPolygon(QPolygon(points))

            else:  # Hexagon (move up and down)
                hexagon_points = []
                shape_y = base_y - size if self.levels[i] > 50 else base_y + size  # Up if level > 50, down otherwise
                for j in range(6):
                    angle = j * (360 / 6) * (np.pi / 180)  # Convert degrees to radians
                    x = x_center + size * np.cos(angle)
                    y = shape_y + size * np.sin(angle)  # Adjust y position
                    hexagon_points.append(QPoint(int(x), int(y)))
                painter.drawPolygon(QPolygon(hexagon_points))

    def get_color(self, level):
        """ Return color based on the level, focusing on yellow, red, blue, and bright white. """
        if level >= 100:  # If level is at maximum, return bright pure white
            return QColor(255, 255, 255)  # Pure white for maximum intensity
        elif level >= 75:  # If level is between 75 and 100, blend yellow and white
            yellow_intensity = int(255 * ((level - 75) / 25))  # Increase yellow intensity
            return QColor(255, yellow_intensity, 0)  # Blend to yellow
        elif level >= 50:  # If level is between 50 and 75, blend yellow and red
            yellow_intensity = 255
            red_intensity = int(255 * ((75 - level) / 25))  # Decrease red intensity
            return QColor(255, yellow_intensity - red_intensity, 0)  # Blend yellow and red
        elif level >= 25:  # If level is between 25 and 50, blend red and blue
            red_intensity = 255
            blue_intensity = int(255 * ((level - 25) / 25))  # Increase blue intensity
            return QColor(red_intensity - blue_intensity, 0, blue_intensity)  # Blend red and blue
        else:  # If level is below 25, increase blue intensity
            blue_intensity = int(255 * (level / 25))  # Increase blue intensity
            return QColor(0, 0, blue_intensity)  # More blue for lower levels




class MusicPlayerGUI(QMainWindow):
    track_timer = None
    equalizer_update_timer = None  # Add a timer for equalizer updates

    def __init__(self):
        super().__init__()

        self.is_playing = False
        self.current_music_file = None

        self.media_player = QMediaPlayer(self)
        self.media_player.positionChanged.connect(self.update_position)
        self.media_player.mediaStatusChanged.connect(self.media_status_changed)
        self.media_player.stateChanged.connect(self.handle_media_state_changed)

        self.equalizer = EqualizerWidget()  # Create equalizer widget
        self.initUI()

        if len(sys.argv) > 1:
            self.load_music_from_command_line()

        if MusicPlayerGUI.track_timer is None:
            MusicPlayerGUI.track_timer = QTimer(self)
            MusicPlayerGUI.track_timer.timeout.connect(self.play_next_track)

        # Initialize equalizer update timer
        if MusicPlayerGUI.equalizer_update_timer is None:
            MusicPlayerGUI.equalizer_update_timer = QTimer(self)
            MusicPlayerGUI.equalizer_update_timer.timeout.connect(self.update_equalizer_levels)
            MusicPlayerGUI.equalizer_update_timer.start(100)  # Update every 100 milliseconds

    def initUI(self):
        self.setWindowTitle("StormOS Music Player")

        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)

        layout = QVBoxLayout(central_widget)
        layout.setAlignment(Qt.AlignCenter)

        top_button_layout1 = QHBoxLayout()

        prev_button = QPushButton("Previous", self)
        prev_button.setIcon(QIcon.fromTheme('media-skip-backward'))
        prev_button.clicked.connect(self.prev_track)
        top_button_layout1.addWidget(prev_button)

        seek_backward_button = QPushButton("<<", self)
        seek_backward_button.clicked.connect(self.seek_backward)
        top_button_layout1.addWidget(seek_backward_button)

        self.play_pause_button = QPushButton("Play", self)
        self.play_pause_button.setIcon(QIcon.fromTheme('media-playback-start'))
        self.play_pause_button.clicked.connect(self.toggle_play_pause)  # Ensure this method is defined
        top_button_layout1.addWidget(self.play_pause_button)

        seek_forward_button = QPushButton(">>", self)
        seek_forward_button.clicked.connect(self.seek_forward)
        top_button_layout1.addWidget(seek_forward_button)

        next_button = QPushButton("Next", self)
        next_button.setIcon(QIcon.fromTheme('media-skip-forward'))
        next_button.clicked.connect(self.next_track)
        top_button_layout1.addWidget(next_button)

        top_button_layout2 = QHBoxLayout()

        load_button = QPushButton("Load", self)
        load_button.setIcon(QIcon.fromTheme('document-open'))
        load_button.clicked.connect(self.load_music)
        top_button_layout2.addWidget(load_button)

        stop_button = QPushButton("Stop", self)
        stop_button.setIcon(QIcon.fromTheme('media-playback-stop'))
        stop_button.clicked.connect(self.stop_song)
        top_button_layout2.addWidget(stop_button)

        self.remove_button = QPushButton("Remove", self)
        self.remove_button.setIcon(QIcon.fromTheme('edit-delete'))
        self.remove_button.clicked.connect(self.remove_selected)
        top_button_layout2.addWidget(self.remove_button)

        layout.addLayout(top_button_layout1)
        layout.addLayout(top_button_layout2)

        self.playlist_widget = QListWidget(self)
        self.playlist_widget.setSelectionMode(QAbstractItemView.SingleSelection)  # Allow single selection
        layout.addWidget(self.playlist_widget)

        # Adding Equalizer widget to the layout
        layout.addWidget(self.equalizer)

        bottom_button_layout = QHBoxLayout()
        self.time_label = QLabel("0:00", self)
        bottom_button_layout.addWidget(self.time_label)

        self.seek_slider = QSlider(Qt.Horizontal)
        self.seek_slider.setTracking(False)
        self.seek_slider.setSingleStep(1000)
        bottom_button_layout.addWidget(self.seek_slider)

        self.remaining_time_label = QLabel("0:00", self)
        bottom_button_layout.addWidget(self.remaining_time_label)

        layout.addLayout(bottom_button_layout)

        self.seek_slider.sliderPressed.connect(self.slider_pressed)
        self.seek_slider.sliderReleased.connect(self.seek_to_position)
        self.seek_slider.valueChanged.connect(self.slider_value_changed)

        self.playlist_widget.itemDoubleClicked.connect(self.double_click_event_handler)
        self.playlist_widget.itemSelectionChanged.connect(self.playlist_item_selected)

    def update_equalizer_levels(self):
        # Update equalizer levels only when playing
        if self.is_playing:
            levels = np.random.randint(0, 100, size=10)  # Simulated levels for demo purposes
            self.equalizer.set_levels(levels)  # Set levels in equalizer
        else:
            self.equalizer.set_levels(np.zeros(10))  # Set levels to zero when not playing

    def toggle_play_pause(self):
        if not self.current_music_file:
            return

        if self.is_playing:
            self.media_player.pause()
            self.play_pause_button.setText("Play")
            self.play_pause_button.setIcon(QIcon.fromTheme('media-playback-start'))
        else:
            if self.media_player.state() == QMediaPlayer.PausedState:
                self.media_player.play()
            else:
                media_content = QMediaContent(QUrl.fromLocalFile(self.current_music_file))
                self.media_player.setMedia(media_content)
            self.play_pause_button.setText("Pause")
            self.play_pause_button.setIcon(QIcon.fromTheme('media-playback-pause'))
        self.is_playing = not self.is_playing

    def stop_song(self):
        if self.is_playing:
            self.media_player.stop()
            self.is_playing = False
            self.play_pause_button.setText("Play")
            self.play_pause_button.setIcon(QIcon.fromTheme('media-playback-start'))

    def load_music(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_dialog = QFileDialog(self, options=options)
        file_dialog.setFileMode(QFileDialog.ExistingFiles | QFileDialog.Directory)
        file_dialog.setViewMode(QFileDialog.List)

        try:
            if file_dialog.exec_():
                selected_files_and_folders = file_dialog.selectedFiles()
                for item in selected_files_and_folders:
                    song_path = item
                    song_title = item.split('/')[-1]
                    self.add_to_playlist(song_title, song_path)

                if not self.current_music_file and self.playlist_widget.count() > 0:
                    first_item = self.playlist_widget.item(0)
                    song_path = first_item.data(Qt.UserRole)
                    self.play_song(song_path)

                for index in range(self.playlist_widget.count()):
                    item = self.playlist_widget.item(index)
                    song_path = item.data(Qt.UserRole)
                    print(f"Playlist Item {index + 1}: {song_path}")
        except Exception as e:
            print(f"Error loading music: {e}")

    def update_position(self, position):
        self.current_time = position
        self.total_time = self.media_player.duration()

        self.time_label.setText(self.format_time(self.current_time / 1000))
        self.seek_slider.setMaximum(self.total_time)
        self.seek_slider.setValue(self.current_time)

        remaining_seconds = int((self.total_time - self.current_time) / 1000)
        self.remaining_time_label.setText(self.format_time(remaining_seconds))

    def media_status_changed(self, status):
        if status == QMediaPlayer.EndOfMedia:
            self.next_track()

    def seek_media(self, position):
        if position < 0:
            position = 0
        elif position > self.media_player.duration():
            position = self.media_player.duration()

        self.media_player.setPosition(position)

    def prev_track(self):
        current_item = self.playlist_widget.currentItem()
        if current_item is None:
            current_item = self.playlist_widget.item(0)
        else:
            current_index = self.playlist_widget.row(current_item)
            if current_index > 0:
                prev_item = self.playlist_widget.item(current_index - 1)
                self.playlist_widget.setCurrentItem(prev_item)
                song_path = prev_item.data(Qt.UserRole)
                self.play_song(song_path)

    def next_track(self):
        if self.media_player.state() != QMediaPlayer.StoppedState:
            self.media_player.stop()

        QTimer.singleShot(100, self.play_next_track)

    def play_next_track(self):
        if self.media_player.state() == QMediaPlayer.StoppedState:
            current_item = self.playlist_widget.currentItem()
            if current_item is None:
                current_item = self.playlist_widget.item(0)
            else:
                current_index = self.playlist_widget.row(current_item)
                if current_index < self.playlist_widget.count() - 1:
                    next_index = current_index + 1
                    next_item = self.playlist_widget.item(next_index)
                    song_path = next_item.data(Qt.UserRole)
                    self.play_song(song_path)

    def seek_forward(self):
        if self.media_player.state() != QMediaPlayer.PlayingState:
            return

        new_position = self.media_player.position() + 5000
        if new_position > self.media_player.duration():
            new_position = self.media_player.duration()

        self.media_player.setPosition(new_position)
        self.seek_slider.setValue(new_position)

    def seek_backward(self):
        position = self.media_player.position() - 5000
        self.media_player.setPosition(position)

    def double_click_event_handler(self, item):
        song_path = item.data(Qt.UserRole)
        self.play_song(song_path)
        self.playlist_widget.clearSelection()

    def load_music_from_command_line(self):
        selected_files_and_folders = sys.argv[1:]
        for item in selected_files_and_folders:
            song_path = item
            song_title = item.split('/')[-1]
            self.add_to_playlist(song_title, song_path)

        if not self.current_music_file:
            first_item = self.playlist_widget.item(0)
            if first_item:
                song_path = first_item.data(Qt.UserRole)
                self.play_song(song_path)

    def play_song(self, song_path):
        if song_path:
            if self.is_playing:
                self.media_player.stop()
                self.is_playing = False
                self.play_pause_button.setText("Play")
                self.play_pause_button.setIcon(QIcon.fromTheme('media-playback-start'))
                if self.track_timer:
                    self.track_timer.stop()
                    self.track_timer = None

            media_content = QMediaContent(QUrl.fromLocalFile(song_path))
            self.media_player.setMedia(media_content)
            self.current_music_file = song_path

            self.media_player.play()
            self.play_pause_button.setText("Pause")
            self.play_pause_button.setIcon(QIcon.fromTheme('media-playback-pause'))
            self.is_playing = True

            self.track_timer = QTimer(self)
            self.track_timer.timeout.connect(self.play_next_track)
            self.track_timer.start(1000)

    def add_to_playlist(self, song_title, song_path):
        item = QListWidgetItem(song_title)
        item.setData(Qt.UserRole, song_path)
        self.playlist_widget.addItem(item)

        if self.playlist_widget.count() == 1:
            self.playlist_widget.setCurrentItem(item)

        print(f"Added to playlist: {song_title}, {song_path}")

    def format_time(self, seconds):
        minutes, seconds = divmod(int(seconds), 60)
        return f"{minutes}:{seconds:02}"

    def remove_selected(self):
        try:
            selected_items = self.playlist_widget.selectedItems()
            if not selected_items:
                return

            # Stop the media player if the removed item is the currently playing song
            for item in selected_items:
                song_path = item.data(Qt.UserRole)
                if song_path == self.current_music_file:
                    self.media_player.stop()
                    self.current_music_file = None
                    self.is_playing = False
                    self.play_pause_button.setText("Play")
                    self.play_pause_button.setIcon(QIcon.fromTheme('media-playback-start'))

            # Remove the selected items from the playlist
            for item in selected_items:
                row = self.playlist_widget.row(item)
                self.playlist_widget.takeItem(row)

            # If there are no items left, reset the media player
            if self.playlist_widget.count() == 0:
                self.media_player.stop()
                self.current_music_file = None
                self.is_playing = False
                self.play_pause_button.setText("Play")
                self.play_pause_button.setIcon(QIcon.fromTheme('media-playback-start'))

        except Exception as e:
            print(f"Error in remove_selected: {e}")

    def slider_pressed(self):
        self.was_playing = (self.media_player.state() == QMediaPlayer.PlayingState)
        if self.was_playing:
            self.media_player.pause()

    def slider_value_changed(self):
        if not hasattr(self, 'was_playing'):
            return

        position = self.seek_slider.value()
        self.time_label.setText(self.format_time(position / 1000))

    def seek_to_position(self):
        if hasattr(self, 'was_playing') and self.was_playing:
            self.media_player.setPosition(self.seek_slider.value())
            self.media_player.play()
            delattr(self, 'was_playing')
        else:
            self.media_player.setPosition(self.seek_slider.value())

    def handle_media_state_changed(self, state):
        if state == QMediaPlayer.StoppedState and self.is_playing:
            self.next_track()

    def handle_media_status_changed(self, status):
        print(f"Media Status Changed: {status}")
        if status == QMediaPlayer.EndOfMedia:
            print("End of Media detected")
            self.next_track()

    def playlist_item_selected(self):
        selected_items = self.playlist_widget.selectedItems()
        if selected_items:
            self.remove_button.setEnabled(True)
        else:
            self.remove_button.setDisabled(True)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MusicPlayerGUI()
    window.show()

    sys.exit(app.exec_())
