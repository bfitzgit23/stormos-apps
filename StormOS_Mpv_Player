#!/usr/bin/env python3

import sys
import os
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QFileDialog, QSlider, QHBoxLayout, QLineEdit, QLabel
from PyQt5.QtCore import Qt, pyqtSignal
import mpv
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import QTimer
import time
from PyQt5.QtGui import QClipboard
from PyQt5.QtCore import QTimer
import re



# Set the LC_ALL environment variable for the current process
os.environ['LC_ALL'] = 'C'

class MPVWidget(QWidget):
    # Define a custom signal
    updateSliderSignal = pyqtSignal(int)

    def __init__(self, initial_media=None, parent=None):
        super().__init__(parent)
        
        self.layout = QVBoxLayout()

        # Set the widget to accept focus and set focus on initialization
        self.setFocusPolicy(Qt.StrongFocus)
        self.setFocus()




        # URL input
        self.urlLayout = QHBoxLayout()
        self.urlLabel = QLabel("Enter URL:", self)
        self.urlInput = QLineEdit(self)
        self.playUrlButton = QPushButton("Play URL", self)
        self.playUrlButton.clicked.connect(self.playUrl)
        self.urlLayout.addWidget(self.urlLabel)
        self.urlLayout.addWidget(self.urlInput)
        self.urlLayout.addWidget(self.playUrlButton)
        self.layout.addLayout(self.urlLayout)



        # Clear URL button
        self.clearUrlButton = QPushButton("Clear", self)
        self.clearUrlButton.clicked.connect(self.clearUrl)
        self.urlLayout.addWidget(self.clearUrlButton)

        
        # Control buttons
        self.controlsLayout = QHBoxLayout()
        
        # Play button
        self.playButton = QPushButton(QIcon.fromTheme("media-playback-start"), "", self)
        self.playButton.clicked.connect(self.selectAndPlay)
        self.controlsLayout.addWidget(self.playButton)

        # Pause button
        self.pauseButton = QPushButton(QIcon.fromTheme("media-playback-pause"), "", self)
        self.pauseButton.clicked.connect(self.togglePause)
        self.controlsLayout.addWidget(self.pauseButton)

        # Stop button
        self.stopButton = QPushButton(QIcon.fromTheme("media-playback-stop"), "", self)
        self.stopButton.clicked.connect(self.stopPlayback)
        self.controlsLayout.addWidget(self.stopButton)

        # Seek backward button
        self.seekBackwardButton = QPushButton(QIcon.fromTheme("media-seek-backward"), "", self)
        self.seekBackwardButton.clicked.connect(lambda: self.seekBySeconds(-10))
        self.controlsLayout.addWidget(self.seekBackwardButton)

        # Elapsed time label
        self.elapsedTimeLabel = QLabel("00:00", self)
        self.controlsLayout.addWidget(self.elapsedTimeLabel)

        # Seek slider
        self.seekSlider = QSlider(Qt.Horizontal, self)
        self.seekSlider.setRange(0, 1000)  # 0 to 1000 for percentage-based seeking
        self.seekSlider.sliderMoved.connect(self.seekPosition)  # Connect the sliderMoved signal
        self.controlsLayout.addWidget(self.seekSlider)

        # Total duration label
        self.totalDurationLabel = QLabel("00:00", self)
        self.controlsLayout.addWidget(self.totalDurationLabel)


        # Seek forward button
        self.seekForwardButton = QPushButton(QIcon.fromTheme("media-seek-forward"), "", self)
        self.seekForwardButton.clicked.connect(lambda: self.seekBySeconds(10))
        self.controlsLayout.addWidget(self.seekForwardButton)

        # Record button (assuming you have a custom icon for this, otherwise use a suitable system icon)
        self.recordButton = QPushButton(QIcon.fromTheme("media-record"), "", self)
        self.recordButton.clicked.connect(self.startRecording)
        self.controlsLayout.addWidget(self.recordButton)

        self.screenshotButton = QPushButton(QIcon.fromTheme("camera"), "", self)
        self.screenshotButton.clicked.connect(self.takeScreenshot)
        self.controlsLayout.addWidget(self.screenshotButton)



        # Volume label and slider
        self.volumeSlider = QSlider(Qt.Horizontal, self)
        self.volumeSlider.setRange(0, 100)
        self.volumeSlider.setValue(100)
        self.volumeSlider.valueChanged.connect(self.changeVolume)
        self.controlsLayout.addWidget(self.volumeSlider)
        self.volumeLabel = QLabel("Vol: 100%", self)
        self.controlsLayout.addWidget(self.volumeLabel)


        

        # Fullscreen button
        self.fullscreenButton = QPushButton(QIcon.fromTheme("view-fullscreen"), "", self)
        self.fullscreenButton.clicked.connect(self.toggleFullscreen)
        self.controlsLayout.addWidget(self.fullscreenButton)


        self.layout.addLayout(self.controlsLayout)

        # MPV player
        self.mpvFrame = QWidget(self)
        self.layout.addWidget(self.mpvFrame)
        self.container = mpv.MPV(wid=str(int(self.mpvFrame.winId())), keep_open=True, ytdl=True)

        # Observe the media-title property to update the window title
        self.container.observe_property("media-title", self.updateWindowTitle)

        self.setLayout(self.layout)

        # Connect to MPV property change events to update the slider and labels
        self.container.observe_property("time-pos", self.updateSeekSlider)
        self.container.observe_property("duration", self.updateTotalDuration)

        self.container['screenshot-directory'] = os.path.expanduser('~/Pictures')
        self.container['screenshot-template'] = 'screenshot-%tY-%tm-%td_%tH-%tM-%tS'




        # Connect the custom signal to the slider's setValue slot
        self.updateSliderSignal.connect(self.seekSlider.setValue)


        # Set up clipboard monitoring
        self.clipboard = QApplication.clipboard()
        self.lastClipboardText = ""
        self.clipboardTimer = QTimer(self)
        self.clipboardTimer.timeout.connect(self.checkClipboard)
        self.clipboardTimer.start(1000)  # Check every second



        # If an initial media file or URL is provided, play it
        if initial_media:
            self.container.play(initial_media)

    def takeScreenshot(self):
        try:
            self.container.command('screenshot')
        except Exception as e:
            print(f"Error taking screenshot: {e}")





    def checkClipboard(self):
        currentClipboardText = self.clipboard.text()
        if currentClipboardText != self.lastClipboardText:
            # Check if it's a valid URL using a regular expression
            url_pattern = re.compile(
                r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
            )
            if url_pattern.match(currentClipboardText):
                self.urlInput.setText(currentClipboardText)
            self.lastClipboardText = currentClipboardText

            

    def clearUrl(self):
        self.urlInput.clear()
        self.resetMPV()


    def resetMPV(self):
        # Stop any current playback
        self.container.command('stop')
        # Clear any loaded media
        self.container.command('loadfile', 'null')
        # Reset other properties to default values (if needed)
        # e.g., self.container.volume = 100



    def selectAndPlay(self):
        options = QFileDialog.Options()
        filePath, _ = QFileDialog.getOpenFileName(self, "Open Movie File", "", "All Files (*);;Movie Files (*.mp4 *.mkv *.avi)", options=options)
        if filePath:
            self.container.play(filePath)
            self.updateWindowTitle(None, filePath)  # Update the window title with the file path

    def playUrl(self):
        url = self.urlInput.text()
        if url:
            self.container.play(url)

    def changeVolume(self, value):
        self.container.volume = value

    def togglePause(self):
        if self.container.pause:
            self.container.pause = False
        else:
            self.container.pause = True

    def stopPlayback(self):
        self.container.command('stop')

    def startRecording(self):
        # Retrieve the media title
        media_title = self.container["media-title"]
        
        # Replace any characters that are not suitable for filenames
        safe_title = "".join([c if c.isalnum() else "_" for c in media_title])
        
        # Determine the file extension based on the media title
        file_extension = ".mkv" if media_title.lower().endswith(".mkv") else ".mp4"
        
        # Create the filename for the recording
        filename = f"{safe_title}{file_extension}"
        
        # Construct the path to the user's Videos folder
        videos_folder = os.path.expanduser('~/Videos')
        
        # Create the full path for the recording
        self.recording_path = os.path.join(videos_folder, filename)  # Store the path as an instance variable
        
        # Start recording
        self.container.record_file = self.recording_path
        self.container.lavfi_complex = '[aid1] [vid1] afifo, aformat=sample_fmts=fltp:sample_rates=44100:channel_layouts=stereo [aout]; vfifo, format=pix_fmts=yuv420p [vout]'

    def reloadMPV(self):
        # Destroy the current MPV instance
        self.container.terminate()
        self.container = None

        # Create a new MPV instance
        self.container = mpv.MPV(wid=str(int(self.mpvFrame.winId())), keep_open=True, ytdl=True)

        # Reconnect the property observers (or any other setup you had for the MPV instance)
        self.container.observe_property("time-pos", self.updateSeekSlider)
        self.container.observe_property("duration", self.updateTotalDuration)
        self.container.observe_property("media-title", self.updateWindowTitle)





    def stopRecording(self):
        # Explicitly stop the recording process
        self.container.command('stop')
        # Introduce a small delay
        time.sleep(1)
        # Reset the MPV instance
        self.resetMPV()



    def resumePlayback(self):
        # Resume the playback (this will effectively stop the recording without terminating the MPV instance)
        self.container.pause = False


    def seekPosition(self, position):
        """Seek to the specified position."""
        if self.container.duration:
            # Calculate the time position based on the slider's percentage
            time_pos = (position / 1000) * self.container.duration
            self.container.seek(time_pos, reference="absolute")

    def updateSeekSlider(self, name, value):
        """Update the seek slider based on the current playback position."""
        if name == "time-pos" and self.container.duration:
            percentage = int((value / self.container.duration) * 1000)
            self.updateSliderSignal.emit(percentage)
            self.elapsedTimeLabel.setText(self.formatTime(value))

    def keyPressEvent(self, event):
        """Handle key press events for seeking and fullscreen."""
        if event.key() == Qt.Key_Right:
            self.seekForwardButton.click()
        elif event.key() == Qt.Key_Left:
            self.seekBackwardButton.click()
        elif event.key() == Qt.Key_Escape:
            if self.isFullScreen():
                self.showNormal()
        else:
            super().keyPressEvent(event)


    def seekBySeconds(self, seconds):
        """Seek by the specified number of seconds."""
        self.container.command("seek", str(seconds), "relative")

    def updateWindowTitle(self, name, title):
        """Update the window title with the media title."""
        if title:
            self.setWindowTitle(title)
        else:
            self.setWindowTitle("SMPV Player")

    def closeEvent(self, event):
        """Handle the widget's close event."""
        # Disconnect the mpv event handlers
        self.container.unobserve_property("time-pos", self.updateSeekSlider)
        self.container.unobserve_property("duration", self.updateTotalDuration)
        super().closeEvent(event)

    def updateSeekSlider(self, name, value):
        """Update the seek slider based on the current playback position."""
        if name == "time-pos" and self.container.duration:
            percentage = int((value / self.container.duration) * 1000)
            self.updateSliderSignal.emit(percentage)
            self.elapsedTimeLabel.setText(self.formatTime(value))

    def updateTotalDuration(self, name, value):
        """Update the total duration label."""
        if name == "duration" and value:
            self.totalDurationLabel.setText(self.formatTime(value))

    @staticmethod
    def formatTime(seconds):
        """Convert seconds to MM:SS format."""
        if seconds:
            mins, sec = divmod(seconds, 60)
            return f"{int(mins):02}:{int(sec):02}"
        return "00:00"

    def toggleFullscreen(self):
        if self.isFullScreen():
            self.showNormal()
        else:
            self.showFullScreen()

    def changeVolume(self, value):
        self.container.volume = value
        self.volumeLabel.setText(f"Vol: {value}%")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    
    # Check if a command-line argument is provided
    initial_media = sys.argv[1] if len(sys.argv) > 1 else None

    window = MPVWidget(initial_media=initial_media)
    window.resize(1200, 800)
    window.show()
    sys.exit(app.exec_())

